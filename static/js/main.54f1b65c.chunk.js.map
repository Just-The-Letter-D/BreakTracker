{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","associate","duration","hour","minute","second","returnedAA","setReturnedAA","BREAK_TIME","setBreakTime","break_time","setBreak","acknowledge","setAcknowledge","setAssociate","AA_on_break","setAAOnBreak","no_associate","setNoAssociate","AAReturn","setAAReturn","inputRef","createRef","durationRef","useEffect","current","focus","window","addEventListener","e","preventDefault","returnValue","backgroundStyle","backgroundColor","getAABeingOnBreak","filter","item","time_in","getAAReturnedFromBreak","getAAOverBreak","prepareCSV","AA_list","myCSVContent","Date","toLocaleDateString","map","time_out","toLocaleTimeString","bottom","when","style","zIndex","id","display","flexDirection","placeholder","onChange","event","target","value","ref","onClick","parseInt","className","onSubmit","found","i","length","now","totalMinute","Math","floor","type","justifyContent","marginTop","label","filename","exportFile","marginBottom","key","fontWeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54f1b65c.chunk.js","sourcesContent":["import React, { useEffect, createRef, useState } from 'react';\nimport Fade from 'react-reveal/Fade';\nimport DownloadLink from \"react-download-link\";\nimport './App.scss';\n\nconst OVER_BREAK = 5;\n\nfunction App() {\n\n  //Set up hooks-----------------------------------\n    const[returnedAA, setReturnedAA] = \n    useState({associate: 'N/A', \n              duration: {hour: 0, minute: 0, second: 0,}\n            });\n\n  const [BREAK_TIME, setBreakTime] = useState(15);\n  const [break_time, setBreak] = useState(15);\n  const [acknowledge, setAcknowledge] = useState(0);\n  const [associate, setAssociate] = useState('');\n  const [AA_on_break, setAAOnBreak] = useState([]);\n  const [no_associate, setNoAssociate] = useState(true);\n  const [AAReturn, setAAReturn] = useState(false);\n\n  const onChangeAssociate = (event) => {\n    setAssociate(event.target.value);\n  }\n  //=============End set up hooks=================\n\n  //Make the cursor focus on input field upon launch\n  const inputRef = createRef();\n  const durationRef = createRef();\n  useEffect(\n    () => {\n      if (inputRef.current && associate === '' && break_time === '')\n        inputRef.current.focus();\n\n        //Make the browser promt confirmation before leaving page\n        window.addEventListener('beforeunload', function (e) {\n          e.preventDefault();\n          e.returnValue = '';\n        });\n\n        //Set acknowledge to display acknowledge message\n        if (acknowledge === 0) setAcknowledge(1);\n    }\n  ,[inputRef, acknowledge, associate, durationRef, break_time])\n  //================End cursor focus===============\n\n\n\n\n  //Submit Badge Scan-----------------------------\n  const onSubmit = (event) => {\n    setNoAssociate(false);\n\n    //Prevent default html form submission\n    event.preventDefault();\n\n    //Search for badge in being on break list-----\n    var found = false;\n    var i = 0;\n\n    for (i = 0; i < AA_on_break.length; i++)\n    {\n      if (AA_on_break[i].associate === associate)\n      {\n        found = true;\n        break;\n      }\n    }\n    //==============End search=====================\n\n    //Associate has not gone to break, add AA on to break list\n    if(!found || AA_on_break.length === 0)\n    {\n      //Display going to break message\n      setAAReturn(false);\n      setAAOnBreak([...AA_on_break, {associate, \n                                      time_out: new Date(),\n                                      duration: 0,\n                                    }]);\n    }\n    \n    //Associate is on break list, returning to work\n    else {  \n      //Display time message\n      setAAReturn(true);\n\n      //Get the duration of Associate's break\n      const now = new Date();\n      var duration = now - AA_on_break[i].time_out;\n\n      //Calculate the total minutes of Associate's break\n      const totalMinute = Math.floor(duration/(1000*60));\n      \n      //Calculate duration with hour, minute, second\n      const hour = Math.floor(duration/(1000*60*60));\n      duration %= (1000*60*60);\n      const minute = Math.floor(duration/(1000*60));\n      duration %= (1000*60);\n      const second = Math.floor(duration/1000);\n      \n      \n      //set hook to display break duration\n      setReturnedAA({associate: AA_on_break[i].associate, \n        duration:{hour, minute, second}});\n          \n      //Add break_in time for returned AA\n      setAAOnBreak(AA_on_break.map(\n        (item) => {\n          if (item.associate === associate)\n            return ({...item, time_in: now, duration: totalMinute});\n          else return item;\n        }))\n    }\n\n    //Reset values\n    inputRef.current.value = '';\n    setAssociate('');\n  }\n\n  //Set the background of duration to reflect the duration\n  //BREAK_TIME minutes: green < OVER_BREAK minutes yello < red \n  const backgroundStyle = (returnedAA) =>\n  {\n    const red = {backgroundColor: 'rgba(249, 0, 0, 0.3)'};\n    const yellow = {backgroundColor: 'rgba(249, 249, 0, 0.3)'};\n    const green = {backgroundColor: 'rgba(0, 249, 0, 0.3)'};\n\n    if(returnedAA.duration)\n    {\n      if ((returnedAA.duration.hour > 0) \n        || (returnedAA.duration.minute > BREAK_TIME + OVER_BREAK))\n        return red;\n\n      else if (returnedAA.duration.minute > BREAK_TIME)\n                return yellow;\n\n      else return green;\n    }\n    else return null;\n  }\n\n  const getAABeingOnBreak = () => AA_on_break.filter(item => !item.time_in);\n  const getAAReturnedFromBreak = () => AA_on_break.filter(item => item.time_in);\n  const getAAOverBreak = () => AA_on_break.filter(item => (item.duration && item.duration > BREAK_TIME + OVER_BREAK));\n\n  //Prepare the CSV file to download list of AA overbreak\n  const prepareCSV = (AA_list) => {\n    var myCSVContent = new Date().toLocaleDateString() + \n      '\\nAssociate,time_out,time_in,Duration\\n';\n    \n    AA_list.map(\n      (item) => myCSVContent += item.associate + ',' \n        + item.time_out.toLocaleTimeString() + ','\n        + ((item.time_in)? item.time_in.toLocaleTimeString() : 'N/A') + ','\n        + ((item.time_in)? item.duration : 'N/A') + '\\n');\n\n    return myCSVContent;\n  }\n\n  const getMessage = () => {\n    if (no_associate) \n      return (<p id ='time-reporter'>No Associates have gone to break yet!</p>)\n    else if (!AAReturn)\n    {\n      return (\n        <p id ='time-reporter'>\n          Associate is going to break!\n        </p>\n      )\n    }\n    else return (              \n      <p style={backgroundStyle(returnedAA)} id='time-reporter'>\n      Associate: {returnedAA.associate} &nbsp; \n      Duration: {returnedAA.duration.hour} hours\t&nbsp; \n        {returnedAA.duration.minute} minutes \t&nbsp;\n        {returnedAA.duration.second} seconds \n      </p>);\n  }\n\n  return (\n    <div>\n      <Fade bottom when={(acknowledge === 1)}>\n        <div style={(acknowledge === 1) ? {zIndex: '100'} : {zIndex: '-1'}}  id='acknowledge-page'>\n          <section>\n            <h1>WARNING!</h1>\n            <p>Please do NOT close this tab, navigate from, or refresh this page \n              until you are finished working with this application.<br/>\n              Doing so will erase ALL DATA stored on this page.</p>\n            <div style={{display: 'flex', flexDirection: 'row'}}>\n              <p>Enter break duration:</p><input placeholder='15' \n                onChange={(event) => setBreak(event.target.value)}\n                ref={durationRef}></input>\n            </div>\n            <button onClick={()=> {\n                                    setBreakTime(parseInt(break_time, 10));\n                                    setAcknowledge(2); \n                                    setBreak('');\n              }}>OK, I understand</button>\n          </section>\n        </div>\n      </Fade>\n\n      <Fade when={(acknowledge === 2)}>\n        <div id='screen-wrapper'>\n          <div id='left-screen' style={{display: 'flex', flexDirection: 'column'}}>\n            <div className='round-border' id='each-section'>\n              <form onSubmit={onSubmit}>\n                <h1>Break time management</h1>\n                <input placeholder=\"Scan Associate's badge\" \n                  type='text' ref={inputRef} \n                  onChange={onChangeAssociate}>\n                </input>\n              </form>\n              <div style={{display: 'flex', flexDirection: 'row', \n                  justifyContent: 'space-between', marginTop: '20px'}}>\n                <h3>Number of AA went to break: {AA_on_break.length}</h3>\n                <DownloadLink label=\"Get CSV\" filename=\"AA_on_break.csv\" exportFile={() => prepareCSV(AA_on_break)}/>\n              </div>\n\n            </div>\n\n            <div className='round-border' id='each-section'>\n\n              <div style={{display: 'flex', flexDirection: 'row', \n                  justifyContent: 'space-between'}}>\n                <h3>Number of AA returned from break: {getAAReturnedFromBreak().length}</h3>\n                <DownloadLink label=\"Get CSV\" filename=\"AA_on_break.csv\" exportFile={() => prepareCSV(getAAReturnedFromBreak())}/>\n              </div>\n              {\n                getMessage()\n              } \n            </div>\n\n            <div className='round-border' id='each-section'>\n              <div style={{display: 'flex', flexDirection: 'row', \n                justifyContent: 'space-between', marginBottom: '20px'}}>\n                <h3>Associates break over {BREAK_TIME + OVER_BREAK} minutes:</h3>\n                <DownloadLink label=\"Get CSV\" filename=\"AA_on_break.csv\" exportFile={() => prepareCSV(getAAOverBreak())}/>\n              </div>\n\n              <ol id='over-break'>\n                {getAAOverBreak().map(item => <li key={item.associate}>\n                  <p>{item.associate}</p>\n                  <p>{item.duration} minutes</p>\n                </li>)}\n              </ol>\n            </div>\n\n          </div>\n\n          <div className='round-border' id='each-section'>\n            <div style={{display: 'flex', flexDirection: 'row', \n                  justifyContent: 'space-between'}}>\n              <h3>Associates being on break: {getAABeingOnBreak().length}</h3>\n              <DownloadLink label=\"Get CSV\" filename=\"AA_on_break.csv\" exportFile={() => prepareCSV(getAABeingOnBreak())}/>\n            </div>\n            <ol>\n              <li style={{fontWeight: 'bold'}}>\n                <p>Associate</p><p>Time out</p>\n              </li>\n\n              {getAABeingOnBreak().map(\n                (item) => <li key={item.associate}>\n                              <p>{item.associate}</p>\n                              <p>{item.time_out.toLocaleTimeString()}</p>\n                          </li>)\n              }\n            </ol>\n          </div>\n        </div>\n      </Fade>\n\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}